buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:4.1.9"
    }
}

plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
}

apply plugin: "net.minecraftforge.gradle"

version = "${mod_version}"
group = 'com.robotgryphon' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--username', 'Dev##'

            mods {
                compactmachines {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                compactmachines {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'compactmachines', '--existing', file('src/main/resources'), '--all', '--output', file('src/generated/resources/')

            mods {
                compactmachines {
                    source sourceSets.main
                }
            }
        }

        unitTests {
            parent runs.server // This run config inherits settings from the server config
            workingDirectory project.file('run/test')
            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher' // The main class which launches a customized server which then runs JUnit tests
            ideaModule "${project.name}.test" // Tell IDEA to use the classpath of the test module
            property 'forge.logging.console.level', 'unittest' // This logging level prevents any other server information messages and leaves only the unit test output
            environment 'MOD_CLASSES', String.join(File.pathSeparator,
                    "${mod_id}%%${sourceSets.main.output.resourcesDir}",
                    "${mod_id}%%${sourceSets.main.output.classesDirs[0]}",
                    "${mod_id}%%${sourceSets.test.output.resourcesDir}",
                    "${mod_id}%%${sourceSets.test.output.classesDirs[0]}",
            ) // Forge will ignore all test sources unless we explicitly tell it to include them as mod sources
            environment 'target', 'fmltestserver' // This is a custom service used to launch with ModLauncher's transforming class loader
            mods {
                compactmachines { // The mod that is being tested - Replace this with your mod ID!
                    sources sourceSets.main
                }
            }
        }
    }
}

def getModVersion(filename) {
    // println(filename);
    def pattern = /^(?<modid>[^-]+)(?:-(?<mcversion>[0-9.]+))?(?:-(?<modver>[0-9.\-]+))\.jar$/;

    def matcher = filename =~ pattern

    def found = matcher.find()

    if (found) {
        def mod = matcher.group("modid");

        // Extract MC version or default
        def mcVersion = matcher.group("mcversion");

        // Extract mod version
        def version = matcher.group("modver");

        // println("> mod: ${mod}; mc: ${mcVersion}; version: ${version}");

        if (mcVersion == null)
            return "${mod}:${mod}:${version}";
        else
            return "${mod}:${mod}-${mcVersion}:${version}";

    } else {
        println("> not a mod filename")
        return filename;
    }
}

def dev_mods_dir = "mods"

task("dev") {
    println(sourceSets.main.output.classesDirs[0]);
}
repositories {
    // Built mods
    flatDir {
        dirs dev_mods_dir
    }

    // location of the maven that hosts JEI files
    maven {
        name "Progwml Repo"
        url "http://dvs1.progwml6.com/files/maven"
    }

    // TheOneProbe
    maven {
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }

    // Unit Tests
    maven {
        name 'MCUnitTests'
        url 'https://jitpack.io'
    }
}

def dev_mods = fileTree(dev_mods_dir).filter { it -> it.isFile() }.files.name.collect({ getModVersion(it) })

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"


    // Deobfuscate each dev mod for runtime
    dev_mods.each {
        compileOnly fg.deobf(it)
        runtimeOnly fg.deobf(it)
    }


    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")

    // The One Probe
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")

    testImplementation(fg.deobf("com.github.alcatrazEscapee:mcjunitlib:1.3.3-${minecraft_version}"))

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    destinationDirectory = file("$rootDir/build-out")
    finalizedBy('reobfJar')
    manifest {
        attributes([
                "Specification-Title"     : "compactmachines",
                "Specification-Vendor"    : "",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion}",
                "Implementation-Vendor"   : "",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    // Sources included because of MinecraftForge/ForgeGradle#369
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
    include 'com/robotgryphon/compactmachines/api/**'
    archiveClassifier = 'api'
    destinationDirectory = file("$rootDir/build-out")
}

artifacts {
    archives jar, apiJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact jar
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/CompactMods/CompactMachines"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

test {
    useJUnitPlatform {
        excludeTags "minecraft"
    }
}
